name: CMake

on: [push]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Debug

jobs:
  Linux:
    # The CMake configure and build commands are platform agnostic and should work equally
    # well on Windows or Mac.  You can convert this to a matrix build if you need
    # cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    strategy:
      matrix:
        os: [ubuntu-latest]
    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v2      
    - name: Install SSH key
      uses: shimataro/ssh-key-action@v2
      with:
        key: ${{ secrets.SSH_KEY }}
        name: id_rsa # optional
        if_key_exists: replace # replace / ignore / fail; optional (defaults to fail)
        known_hosts: unnecessary
    - name: checkout submodule
      run: git submodule update --init --recursive

    - name: Create Build Environment
      # Some projects don't allow in-source building, so create a separate build directory
      # We'll use this as our working directory for all subsequent commands
      run: cmake -E make_directory ${{github.workspace}}/build
      
    - name: boost
      run: sudo apt-get update && sudo apt-get install -yq build-essential  clang-10 valgrind libboost-all-dev p7zip-full libcurl4-gnutls-dev default-libmysqlclient-dev
      
    - name: Configure CMake
      # Use a bash shell so we can use the same syntax for environment variable
      # access regardless of the host operating system
      shell: bash
      working-directory: ${{github.workspace}}/build
      # Note the current convention is to use the -S and -B options here to specify source 
      # and build directories, but this is only available with CMake 3.13 and higher.  
      # The CMake binaries on the Github Actions machines are (as of this writing) 3.12
      run: cmake $GITHUB_WORKSPACE/server_project/ -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DENABLE_LOCAL_TESTING=1
    - name: Build
      working-directory: ${{github.workspace}}/build
      shell: bash
      # Execute the build.  You can specify a specific target with "--target <NAME>"
      run: cmake --build . --config $BUILD_TYPE
      
  Windows:
    # The CMake configure and build commands are platform agnostic and should work equally
    # well on Windows or Mac.  You can convert this to a matrix build if you need
    # cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    strategy:
      matrix:
        os: [windows-latest]
    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v2      
    - name: Configure SSH
      run: |
          Set-Service ssh-agent -StartupType Manual
          Start-Service ssh-agent
          git config --global core.sshCommand "'C:\Windows\System32\OpenSSH\ssh.exe'"
    - name: Add SSH key
      run: |
          echo $env:SSH_PRIVATE_KEY | ssh-add -
      env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_KEY }}
    - name: Add github.com to known_hosts
      run: |          
          mkdir ~/.ssh
          ssh-keyscan github.com >> ~/.ssh/known_hosts
    - name: checkout submodule
      run: git submodule update --init --recursive

    - name: Create Build Environment
      # Some projects don't allow in-source building, so create a separate build directory
      # We'll use this as our working directory for all subsequent commands
      run: cmake -E make_directory ${{github.workspace}}/build
    - name: Create Build Environment-Boost
      run: $env:BOOST_ROOT=$env:BOOST_ROOT_1_72_0
    - uses: suisei-cn/actions-download-file@v1
      id: downloadfile  # Remember to give an ID if you need the output filename
      name: Download libmysql
      with:
        url: "https://downloads.mysql.com/archives/get/p/19/file/mysql-connector-c-6.1.11-win32.msi"
        target: ${{github.workspace}}/
      
    - name: Configure CMake
      # Use a bash shell so we can use the same syntax for environment variable
      # access regardless of the host operating system
      shell: bash
      working-directory: ${{github.workspace}}/build
      # Note the current convention is to use the -S and -B options here to specify source 
      # and build directories, but this is only available with CMake 3.13 and higher.  
      # The CMake binaries on the Github Actions machines are (as of this writing) 3.12
      run: cmake $GITHUB_WORKSPACE/server_project/ -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DENABLE_LOCAL_TESTING=1
      
    - name: Build
      working-directory: ${{github.workspace}}/build
      shell: bash
      # Execute the build.  You can specify a specific target with "--target <NAME>"
      run: cmake --build . --config $BUILD_TYPE
